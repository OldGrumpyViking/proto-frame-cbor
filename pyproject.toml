[project]
name = "proto-frame-cbor"
description = 'CBOR protocol frames for the proto-frame framework.'
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
keywords = [
  "protocol",
  "frame",
  "cbor",
]
authors = [
  { name = "OldGrumpyViking", email = "old.grumpy.viking@hotmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
]
dynamic = ["version"]
dependencies = [
  "proto-frame"
]

[project.optional-dependencies]
test = [
  "pytest ~= 7.1.2",
  "pytest-cov ~= 3.0.0",
  "pytest-sugar ~= 0.9.5",
  "pytest-xdist[psutil] ~= 2.5.0",
  "pytest-randomly ~= 3.12.0",
]
lint = [
  "mypy ~= 0.971",
  "isort ~= 5.10.1",
  "black ~= 22.3.0",
  "bandit[toml] ~= 1.7.4",
  "pyupgrade ~= 2.37.3",
  "pydocstringformatter ~= 0.6.2",
  "pylint ~= 2.14.5",
]
doc = [
  "sphinx ~= 5.1.1",
  "sphinxcontrib-plantuml ~= 0.24",
  "sphinx-autodoc-typehints ~= 1.19.2",
  "furo ~= 2022.6.21",
  "myst-parser[linkify] ~= 0.18.0",
  "sphinx-inline-tabs ~= 2022.1.2b11",
  "sphinx-autobuild ~= 2021.3.14",
  "sphinx-copybutton ~= 0.5.0",
  "sphinx_design ~= 0.2.0",
]
dev = [  # All development features
  "proto-frame-cbor[test,lint,doc]",
]

[project.urls]
Issues = "https://github.com/OldGrumpyViking/proto-frame-cbor/issues"
Source = "https://github.com/OldGrumpyViking/proto-frame-cbor"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/proto_frame.cbor"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/proto_frame/cbor/_version.py"

[tool.pytest.ini_options]
addopts = ["--cov",
           "--no-cov-on-fail",
           "-nauto",
           ]

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = ["proto_frame", "tests"]
omit = [
]

[tool.coverage.report]
fail_under = 0
show_missing = true
skip_covered = true
skip_empty = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
]

[tool.mypy]
python_version = 3.8
pretty = true
warn_unused_configs = true
warn_unused_ignores = true
exclude = []
check_untyped_defs = true
follow_imports = "normal"  # 'silent' for less strict mode (Individual modules can also be disabled)
# allow_untyped_globals = true  # Might want to enable this on legacy code

[tool.isort]
py_version = "38"
profile = "black"
multi_line_output = 5
include_trailing_comma = true
use_parentheses = true
src_paths = ["src", "tests"]
line_length = 120

[tool.black]
target-version = ["py38", "py39", "py310"]
line-length = 120

[tool.bandit.assert_used]
skips = ["*_test.py", "*test_*.py"]

[tool.pydocstringformatter]
max-line-length = 120

[tool.pylint.main]
py-version = "3.8"
jobs = 0
# fail-on = ["W", "E", "F"]  # Less strict pylint
# fail-under = 5  # 0-10 for strictness [default: 10]
ignore = ["_version.py", ]

[tool.pylint."messages control"]
disable = [
  "raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message",
  "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "missing-module-docstring",
  "missing-function-docstring", "missing-class-docstring",
]

[tool.pylint.format]
max-line-length = 120

[tool.hatch.envs.default]
python = "3.8"
platforms = ["linux",]
features = [
  "dev",
]

[tool.hatch.envs.default.scripts]
test = "pytest"
fmt = [
  "isort .",
  "pydocstringformatter -w .",
  "pyupgrade `find . -name \"*.py\" -type f` --py38-plus",  # Linux command
  # "pyupgrade --py38-plus (gci -r -fi '*.py' | Select -ExpandProperty FullName)",  # Powershell command
  "black .",
]
lint = [
  "isort . --diff --check",
  "pydocstringformatter . --exit-code",
  "black . --diff --check --color",
  "mypy . --install-types --non-interactive",
  "bandit -r . -c pyproject.toml",
  "pylint src"
]
doc = "sphinx-build docs docs/_build -j auto -W --keep-going"
doc-live = "sphinx-autobuild -a docs docs/_build/html --watch ."

# [tool.hatch.envs.cont]  # Used to run commnads using containers as the venv backend.
# type = "container"  # Needs the "hatch-containers" plugin

# [tool.hatch.envs.cnda]  # Used to run commnads using conda as the venv backend.
# type = "conda"  # Needs the "hatch-conda" plugin

[tool.hatch.envs.codev]
pre-install-commands = [  # Changes to this line requires re-creation of the environment "hatch env remove codev".
  "pip install -e ../proto-frame"  # Used for developing on two projects in editable mode simultaniously
]

[tool.hatch.envs.mrun]  # Used to run a command in multiple python environments
# type = "container"  # Needs the "hatch-containers" plugin
# type = "conda"  # Needs the "hatch-conda" plugin

[[tool.hatch.envs.mrun.matrix]]
python = ["38", "39", "310"]

[tool.hatch.envs.locked]  # Used for working with locked environments
platforms = ["linux",]
features = []
pre-install-commands = [
  "pip install -r pip.lock || true"  # Linux specific cmd
]

[tool.hatch.envs.locked.scripts]
lock = "pip check && pip freeze --exclude-editable > pip.lock"  # Linux specific cmd
check = "pip freeze --exclude-editable | diff pip.lock -"  # Linux specific cmd
update = "pip uninstall -r pip.lock -y && pip install -e . && pip check && pip freeze --exclude-editable > pip.lock"  # Linux specific cmd


## Minimal CI specific environments
[tool.hatch.envs.test]
features = [
  "test",
]

[tool.hatch.envs.lint]
features = [
  "lint",
]

[tool.hatch.envs.doc]
features = [
  "doc",
]
